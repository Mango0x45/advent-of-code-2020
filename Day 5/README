                      ____   _
                     | __ ) (_) _ __    __ _  _ __  _   _
                     |  _ \ | || '_ \  / _` || '__|| | | |
                     | |_) || || | | || (_| || |   | |_| |
                     |____/ |_||_| |_| \__,_||_|    \__, |
                                                    |___/
                ____                          _  _
               | __ )   ___    __ _  _ __  __| |(_) _ __    __ _
               |  _ \  / _ \  / _` || '__|/ _` || || '_ \  / _` |
               | |_) || (_) || (_| || |  | (_| || || | | || (_| |
               |____/  \___/  \__,_||_|   \__,_||_||_| |_| \__, |
                                                           |___/

Overview
========
Part 1:
    Parse the input strings and determine the largest seat ID

Part 2:
    Parse the input strings and determine the missing seat ID


Note
====
For this puzzle, I used a multifile solution. To run the solution, you must execute the following commands:
    `./seadids | ./puzzle-1.awk`
    `./seadids | ./puzzle-2.awk`
